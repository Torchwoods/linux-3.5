--- mach-smdk4x12.c	2013-10-28 15:00:22.000000000 +0800
+++ mach-tiny4412.c	2013-10-28 15:00:22.000000000 +0800
@@ -43,6 +43,8 @@
 #include <plat/cpu.h>
 #include <plat/devs.h>
 #include <plat/gpio-cfg.h>
+#include <plat/adc.h>
+#include <plat/adc-core.h>
 #include <plat/iic.h>
 #include <plat/keypad.h>
 #include <plat/mfc.h>
@@ -67,6 +69,7 @@
 #include <mach/ohci.h>
 #include <mach/ppmu.h>
 #include <mach/dev.h>
+#include <mach/s3cfb.h>
 
 #include <media/v4l2-mediabus.h>
 #include <media/s5p_fimc.h>
@@ -126,17 +129,11 @@
 };
 
 static struct s3c_sdhci_platdata smdk4x12_hsmmc2_pdata __initdata = {
-	.cd_type		= S3C_SDHCI_CD_GPIO,
-	.ext_cd_gpio		= EXYNOS4_GPK2(2),
-	.ext_cd_gpio_invert	= 1,
-#ifdef CONFIG_EXYNOS4_SDHCI_CH2_8BIT
-	.max_width		= 8,
-	.host_caps		= MMC_CAP_8_BIT_DATA,
-#endif
+	.cd_type		= S3C_SDHCI_CD_INTERNAL,
 };
 
 static struct s3c_sdhci_platdata smdk4x12_hsmmc3_pdata __initdata = {
-	.cd_type		= S3C_SDHCI_CD_INTERNAL,
+	.cd_type		= S3C_SDHCI_CD_PERMANENT,
 };
 
 static struct regulator_consumer_supply max8997_buck1 =
@@ -919,7 +916,31 @@
         .ldo[0] = { 0, &wm8994_ldo1_data },
         .ldo[1] = { 0, &wm8994_ldo2_data },
 };
-static struct i2c_board_info smdk4x12_i2c_devs0_s5m8767[] __initdata = {
+
+static struct s3c2410_platform_i2c tiny4412_i2c0_data __initdata = {
+	.flags			= 0,
+	.bus_num		= 0,
+	.slave_addr		= 0x10,
+	.frequency		= 200*1000,
+	.sda_delay		= 100,
+};
+
+#ifdef CONFIG_SND_SOC_WM8960_TINY4412
+#include <sound/wm8960.h>
+static struct wm8960_data wm8960_pdata = {
+	.capless	= 0,
+	.dres		= WM8960_DRES_400R,
+};
+#endif
+
+static struct i2c_board_info smdk4x12_i2c_devs0[] __initdata = {
+#ifdef CONFIG_SND_SOC_WM8960_TINY4412
+	{
+		I2C_BOARD_INFO("wm8960", 0x1a),
+		.platform_data = &wm8960_pdata,
+	},
+#endif
+#if 0
 #ifdef CONFIG_REGULATOR_S5M8767
 	{
 		I2C_BOARD_INFO("s5m87xx", 0xCC >> 1),
@@ -927,8 +948,6 @@
 		.irq		= IRQ_EINT(26),
 	},
 #endif
-};
-static struct i2c_board_info smdk4x12_i2c_devs0_max77686[] __initdata = {
 #ifdef CONFIG_REGULATOR_MAX77686
 	{
 		I2C_BOARD_INFO("max77686", (0x12 >> 1)),
@@ -936,19 +955,45 @@
 		.irq		= IRQ_EINT(26),
 	},
 #endif
+#endif
+};
+
+#ifdef CONFIG_TOUCHSCREEN_FT5X0X
+#include <plat/ft5x0x_touch.h>
+static struct ft5x0x_i2c_platform_data ft5x0x_pdata = {
+	.gpio_irq		= EXYNOS4_GPX1(6),
+	.irq_cfg		= S3C_GPIO_SFN(0xf),
+	.screen_max_x	= 800,
+	.screen_max_y	= 1280,
+	.pressure_max	= 255,
+};
+#endif
+
+static struct s3c2410_platform_i2c tiny4412_i2c1_data __initdata = {
+	.flags			= 0,
+	.bus_num		= 1,
+	.slave_addr		= 0x10,
+	.frequency		= 200*1000,
+	.sda_delay		= 100,
 };
 
 static struct i2c_board_info smdk4x12_i2c_devs1[] __initdata = {
+#ifdef CONFIG_TOUCHSCREEN_FT5X0X
+	{
+		I2C_BOARD_INFO("ft5x0x_ts", (0x70 >> 1)),
+		.platform_data = &ft5x0x_pdata,
+	},
+#endif
+#ifdef CONFIG_SND_SOC_SAMSUNG_SMDK_WM8994 
 	{ 
 		I2C_BOARD_INFO("wm8994", 0x1a), 
 	  	.platform_data  = &wm8994_platform_data,
 	}
+#endif
 };
 
 static struct i2c_board_info smdk4x12_i2c_devs2[] __initdata = {
-        {
-                I2C_BOARD_INFO("s5p_ddc", (0x74 >> 1)),
-        },
+	/* nothing here yet */
 };
 
 
@@ -1127,55 +1172,82 @@
 		pr_err("Camera port A setup failed\n");
 }
 
+#ifdef CONFIG_MXC_MMA845X
+#include <linux/mma845x.h>
+
+static struct mxc_mma845x_platform_data mma845x_data = {
+	.gpio_pin_get = NULL,
+	.gpio_pin_put = NULL,
+	.int1 = IRQ_EINT(25),	// ACCL_INT1 is gpio for MMA845X INT1
+	.int2 = 0,				// ACCL_INT2 is gpio for MMA845X INT2
+};
+#endif
+
+#ifdef CONFIG_SENSORS_MMA7660
+#include <linux/mma7660.h>
+static struct mma7660_platform_data mma7660_pdata = {
+	.irq			= IRQ_EINT(25),
+	.poll_interval	= 100,
+	.input_fuzz		= 4,
+	.input_flat		= 4,
+};
+#endif
+
+static struct s3c2410_platform_i2c tiny4412_i2c3_data __initdata = {
+	.flags			= 0,
+	.bus_num		= 3,
+	.slave_addr		= 0x10,
+	.frequency		= 200*1000,
+	.sda_delay		= 100,
+};
+
 static struct i2c_board_info smdk4x12_i2c_devs3[] __initdata = {
-	/* nothing here yet */
+#ifdef CONFIG_MXC_MMA845X
+	{
+		.type = "mma845x",
+		.addr = 0x1D,		/*mma845x i2c slave address*/
+		.platform_data = (void *)&mma845x_data,
+	},
+#endif
+#ifdef CONFIG_SENSORS_MMA7660
+	{
+		I2C_BOARD_INFO("mma7660", 0x4c),
+		.platform_data = &mma7660_pdata,
+	},
+#endif
 };
 
 /* I2C module and id for HDMIPHY */
 static struct i2c_board_info smdk4x12_i2c_hdmiphy[] __initdata = {
-        { I2C_BOARD_INFO("hdmiphy-exynos4412", 0x38), }
+	{ I2C_BOARD_INFO("hdmiphy-exynos4412", 0x38), }
 };
 
 static void s5p_tv_setup(void)
 {
-        /* direct HPD to External Interrupt */
-        WARN_ON(gpio_request_one(EXYNOS4_GPX3(7), GPIOF_IN, "hpd-plug"));
-        s3c_gpio_cfgpin(EXYNOS4_GPX3(7), S3C_GPIO_SFN(0xf));
-        s3c_gpio_setpull(EXYNOS4_GPX3(7), S3C_GPIO_PULL_NONE);
+	/* direct HPD to External Interrupt */
+	WARN_ON(gpio_request_one(EXYNOS4_GPX3(7), GPIOF_IN, "hpd-plug"));
+	s3c_gpio_cfgpin(EXYNOS4_GPX3(7), S3C_GPIO_SFN(0xf));
+	s3c_gpio_setpull(EXYNOS4_GPX3(7), S3C_GPIO_PULL_NONE);
 	gpio_free(EXYNOS4_GPX3(7));
 }
 
-static int smdk4x12_touch_attb_read_val (void)
-{
-	return gpio_get_value(EXYNOS4_GPX2(6));
-}
-
-static struct pixcir_ts_platform_data smdk4x12_touch_pdata = {	
-	.attb_read_val = smdk4x12_touch_attb_read_val,
-        .x_max = 480,
-        .y_max = 800,   
+static struct s3c2410_platform_i2c tiny4412_i2c7_data __initdata = {
+	.flags			= 0,
+	.bus_num		= 7,
+	.slave_addr		= 0x10,
+	.frequency		= 200*1000,
+	.sda_delay		= 100,
 };
 
 static struct i2c_board_info smdk4x12_i2c_devs7[] __initdata = {
 	{
-                I2C_BOARD_INFO("pixcir_ts", 0x5C),
-                .platform_data  = &smdk4x12_touch_pdata,
-                .irq            = IRQ_EINT(22),
-        },
+		I2C_BOARD_INFO("s5p_ddc", (0x74 >> 1)),
+	},
 };
 
 static void __init smdk4x12_touch_init(void)
 {
-	int err;
-	err = gpio_request_one(EXYNOS4X12_GPM3(4),GPIOF_OUT_INIT_HIGH,"GPM3");
-        if (err) {
-                pr_err("failed to request GPM3 for touch reset control\n");
-        }
-        s3c_gpio_cfgpin(EXYNOS4X12_GPM3(4), S3C_GPIO_OUTPUT);
-	gpio_direction_output(EXYNOS4X12_GPM3(4),0);
-	mdelay(20);
-	gpio_direction_output(EXYNOS4X12_GPM3(4),1);
-	s3c_gpio_setpull(EXYNOS4_GPX2(6),S3C_GPIO_PULL_NONE);
+	/* nothing here yet */
 }
 
 static struct samsung_bl_gpio_info smdk4x12_bl_gpio_info = {
@@ -1191,56 +1263,56 @@
 static struct s3c_fb_pd_win smdk4x12_fb_win0 = {
 	.xres			= 480,
 	.yres			= 800,
-        .virtual_x              = 480,
-        .virtual_y              = 800 * CONFIG_FB_S3C_NR_BUFFERS,
-        .max_bpp                = 32,
-        .default_bpp            = 24,
+	.virtual_x		= 480,
+	.virtual_y		= 800 * CONFIG_FB_S3C_NR_BUFFERS,
+	.max_bpp		= 32,
+	.default_bpp	= 24,
 	.width			= 66,
-	.height 		= 109,
+	.height			= 109,
 };
 
 static struct s3c_fb_pd_win smdk4x12_fb_win1 = {
 	.xres			= 480,
 	.yres			= 800,
-        .virtual_x              = 480,
-        .virtual_y              = 800 * CONFIG_FB_S3C_NR_BUFFERS,
-        .max_bpp                = 32,
-        .default_bpp            = 24,
+	.virtual_x		= 480,
+	.virtual_y		= 800 * CONFIG_FB_S3C_NR_BUFFERS,
+	.max_bpp		= 32,
+	.default_bpp	= 24,
 	.width			= 66,
-	.height 		= 109,
+	.height			= 109,
 };
 
 static struct s3c_fb_pd_win smdk4x12_fb_win2 = {
 	.xres			= 480,
 	.yres			= 800,
-        .virtual_x              = 480,
-        .virtual_y              = 800 * CONFIG_FB_S3C_NR_BUFFERS,
-        .max_bpp                = 32,
-        .default_bpp            = 24,
+	.virtual_x		= 480,
+	.virtual_y		= 800 * CONFIG_FB_S3C_NR_BUFFERS,
+	.max_bpp		= 32,
+	.default_bpp	= 24,
 	.width			= 66,
-	.height 		= 109,
+	.height			= 109,
 };
 
 static struct s3c_fb_pd_win smdk4x12_fb_win3 = {
 	.xres			= 480,
 	.yres			= 800,
-        .virtual_x              = 480,
-        .virtual_y              = 800 * CONFIG_FB_S3C_NR_BUFFERS,
-        .max_bpp                = 32,
-        .default_bpp            = 24,
+	.virtual_x		= 480,
+	.virtual_y		= 800 * CONFIG_FB_S3C_NR_BUFFERS,
+	.max_bpp		= 32,
+	.default_bpp	= 24,
 	.width			= 66,
-	.height 		= 109,
+	.height			= 109,
 };
 
 static struct s3c_fb_pd_win smdk4x12_fb_win4 = {
 	.xres			= 480,
 	.yres			= 800,
-        .virtual_x              = 480,
-        .virtual_y              = 800 * CONFIG_FB_S3C_NR_BUFFERS,
-        .max_bpp                = 32,
-        .default_bpp            = 24,
+	.virtual_x		= 480,
+	.virtual_y		= 800 * CONFIG_FB_S3C_NR_BUFFERS,
+	.max_bpp		= 32,
+	.default_bpp	= 24,
 	.width			= 66,
-	.height 		= 109,
+	.height			= 109,
 };
 
 static struct fb_videomode smdk4x12_lcd_timing = {
@@ -1255,17 +1327,75 @@
 };
 
 static struct s3c_fb_platdata smdk4x12_lcd0_pdata __initdata = {
-        .win[0]         = &smdk4x12_fb_win0,
-        .win[1]         = &smdk4x12_fb_win1,
-        .win[2]         = &smdk4x12_fb_win2,
-        .win[3]         = &smdk4x12_fb_win3,
-        .win[4]         = &smdk4x12_fb_win4,
+	.win[0]		= &smdk4x12_fb_win0,
+	.win[1]		= &smdk4x12_fb_win1,
+	.win[2]		= &smdk4x12_fb_win2,
+	.win[3]		= &smdk4x12_fb_win3,
+	.win[4]		= &smdk4x12_fb_win4,
 	.vtiming	= &smdk4x12_lcd_timing,
-        .vidcon0        = VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
-        .vidcon1        = VIDCON1_INV_HSYNC | VIDCON1_INV_VSYNC,
-        .setup_gpio     = exynos4_fimd0_gpio_setup_24bpp,
+	.vidcon0	= VIDCON0_VIDOUT_RGB | VIDCON0_PNRMODE_RGB,
+	.vidcon1	= VIDCON1_INV_HSYNC | VIDCON1_INV_VSYNC,
+	.setup_gpio	= exynos4_fimd0_gpio_setup_24bpp,
 };
 
+static void __init tiny4412_fb_init_pdata(struct s3c_fb_platdata *pd) {
+	struct s3cfb_lcd *lcd;
+	struct s3c_fb_pd_win *win;
+	struct fb_videomode *mode = pd->vtiming;
+	unsigned long val = 0;
+	u64 pixclk = 1000000000000ULL;
+	u32 div;
+	int i;
+
+	lcd = tiny4412_get_lcd();
+
+	for (i = 0; i < S3C_FB_MAX_WIN; i++) {
+		if (pd->win[i] == NULL)
+			continue;
+
+		win = pd->win[i];
+		win->xres		= lcd->width;
+		win->yres		= lcd->height;
+		win->default_bpp= lcd->bpp ? : 24;
+		win->virtual_x	= win->xres;
+		win->virtual_y	= win->yres * CONFIG_FB_S3C_NR_BUFFERS;
+		win->width		= lcd->p_width;
+		win->height		= lcd->p_height;
+	}
+
+	mode->left_margin	= lcd->timing.h_bp;
+	mode->right_margin	= lcd->timing.h_fp;
+	mode->upper_margin	= lcd->timing.v_bp;
+	mode->lower_margin	= lcd->timing.v_fp;
+	mode->hsync_len		= lcd->timing.h_sw;
+	mode->vsync_len		= lcd->timing.v_sw;
+	mode->xres			= lcd->width;
+	mode->yres			= lcd->height;
+
+	/* calculates pixel clock */
+	div  = mode->left_margin + mode->hsync_len + mode->right_margin +
+		mode->xres;
+	div *= mode->upper_margin + mode->vsync_len + mode->lower_margin +
+		mode->yres;
+	div *= lcd->freq ? : 60;
+
+	do_div(pixclk, div);
+
+	mode->pixclock		= pixclk + 386;
+
+	/* initialize signal polarity of RGB interface */
+	if (lcd->polarity.rise_vclk)
+		val |= VIDCON1_INV_VCLK;
+	if (lcd->polarity.inv_hsync)
+		val |= VIDCON1_INV_HSYNC;
+	if (lcd->polarity.inv_vsync)
+		val |= VIDCON1_INV_VSYNC;
+	if (lcd->polarity.inv_vden)
+		val |= VIDCON1_INV_VDEN;
+
+	pd->vidcon1 = val;
+}
+
 #ifdef CONFIG_S3C64XX_DEV_SPI0
 static struct s3c64xx_spi_csinfo spi0_csi[] = {
 	[0] = {
@@ -1332,58 +1462,60 @@
 #ifdef CONFIG_LCD_LMS501KF03
 static int lcd_power_on(struct lcd_device *ld, int enable)
 {
-        return 1;
+	return 1;
 }
 
 static int reset_lcd(struct lcd_device *ld)
 {
-        int err = 0;
-        err = gpio_request_one(EXYNOS4X12_GPM3(6),
-                               GPIOF_OUT_INIT_HIGH, "GPM3");
+	int err = 0;
+	err = gpio_request_one(EXYNOS4X12_GPM3(6),
+			GPIOF_OUT_INIT_HIGH, "GPM3");
 	if (err) {
 		pr_err("failed to request GPM3 for lcd reset control\n");
-                return err;
+		return err;
 	}
-        gpio_set_value(EXYNOS4X12_GPM3(6), 0);
-        mdelay(1);
-        gpio_set_value(EXYNOS4X12_GPM3(6), 1);
+	gpio_set_value(EXYNOS4X12_GPM3(6), 0);
+	mdelay(1);
+	gpio_set_value(EXYNOS4X12_GPM3(6), 1);
 	gpio_free(EXYNOS4X12_GPM3(6));
 
-        return 1;
+	return 1;
 }
+
 static struct lcd_platform_data lms501kf03_platform_data = {
-        .reset                  = reset_lcd,
-        .power_on               = lcd_power_on,
-        .lcd_enabled            = 0,
-        .reset_delay            = 100,  /* 100ms */
+	.reset			= reset_lcd,
+	.power_on		= lcd_power_on,
+	.lcd_enabled	= 0,
+	.reset_delay	= 100,  /* 100ms */
 };
-#define         LCD_BUS_NUM     3
+
+#define LCD_BUS_NUM		3
 static struct spi_board_info spi_board_info[] __initdata = {
-        {
-                .modalias               = "lms501kf03",
-                .platform_data          = (void *)&lms501kf03_platform_data,
-                .max_speed_hz           = 1200000,
-                .bus_num                = LCD_BUS_NUM,
-                .chip_select            = 0,
-                .mode                   = SPI_MODE_3,
-                .controller_data        = (void *)EXYNOS4_GPB(5),
-        }
+	{
+		.modalias		= "lms501kf03",
+		.platform_data	= (void *)&lms501kf03_platform_data,
+		.max_speed_hz	= 1200000,
+		.bus_num		= LCD_BUS_NUM,
+		.chip_select	= 0,
+		.mode			= SPI_MODE_3,
+		.controller_data	= (void *)EXYNOS4_GPB(5),
+	}
 };
 
 static struct spi_gpio_platform_data lms501kf03_spi_gpio_data = {
-        .sck    = EXYNOS4_GPB(4), /* DISPLAY_CLK */
-        .mosi   = EXYNOS4_GPB(7), /* DISPLAY_SI */
-        .miso   = SPI_GPIO_NO_MISO,
-        .num_chipselect = 1,
+	.sck	= EXYNOS4_GPB(4), /* DISPLAY_CLK */
+	.mosi	= EXYNOS4_GPB(7), /* DISPLAY_SI */
+	.miso	= SPI_GPIO_NO_MISO,
+	.num_chipselect = 1,
 };
 
 static struct platform_device s3c_device_spi_gpio = {
-        .name   = "spi_gpio",
-        .id     = LCD_BUS_NUM,
-        .dev    = {
-                .parent         = &s5p_device_fimd0.dev,
-                .platform_data  = &lms501kf03_spi_gpio_data,
-        },
+	.name	= "spi_gpio",
+	.id		= LCD_BUS_NUM,
+	.dev	= {
+		.parent			= &s5p_device_fimd0.dev,
+		.platform_data	= &lms501kf03_spi_gpio_data,
+	},
 };
 #endif
 
@@ -1395,34 +1527,31 @@
 	for (gpio = EXYNOS4_GPK0(0); gpio < EXYNOS4_GPK0(2); gpio++) {
 		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_NONE);
-		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
 	}
 
 	switch (width) {
-	case 8:
+	case MMC_BUS_WIDTH_8:
 		for (gpio = EXYNOS4_GPK1(3); gpio <= EXYNOS4_GPK1(6); gpio++) {
 			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(4));
 			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
-			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
 		}
-	case 4:
+	case MMC_BUS_WIDTH_4:
 		for (gpio = EXYNOS4_GPK0(3); gpio <= EXYNOS4_GPK0(6); gpio++) {
 			s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
 			s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
-			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+			s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
 		}
 		break;
-	case 1:
+	case MMC_BUS_WIDTH_1:
 		gpio = EXYNOS4_GPK0(3);
 		s3c_gpio_cfgpin(gpio, S3C_GPIO_SFN(3));
 		s3c_gpio_setpull(gpio, S3C_GPIO_PULL_UP);
-		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV4);
+		s5p_gpio_set_drvstr(gpio, S5P_GPIO_DRVSTR_LV2);
 	default:
 		break;
 	}
-
-	gpio = EXYNOS4_GPK0(2);
-	s3c_gpio_cfgpin(gpio, S3C_GPIO_INPUT);
 }
 
 static struct dw_mci_board exynos_dwmci_pdata __initdata = {
@@ -1439,43 +1568,117 @@
 };
 #endif
 
-static struct gpio_event_direct_entry smdk4x12_keypad_key_map[] = {
-	{
-		.gpio   = EXYNOS4_GPX0(0),
-		.code   = KEY_POWER,
+static int exynos_boot_dev;
+
+#define is_bootfrom_emmc()	\
+	((exynos_boot_dev == 0x6) || (exynos_boot_dev == 0x7))
+#define is_bootfrom_sd()	\
+	 (exynos_boot_dev == 0x3)
+
+static void __init exynos_bootdev_init(void)
+{
+	u32 capboot = MMC_CAP2_BOOT_DEVICE;
+
+	exynos_boot_dev = __raw_readl(S5P_INFORM3);
+
+	if (is_bootfrom_emmc()) {
+#if defined(CONFIG_EXYNOS4_DEV_DWMCI)
+		exynos_dwmci_pdata.caps2 |= capboot;
+#endif
+	} else if (is_bootfrom_sd()) {
+		smdk4x12_hsmmc2_pdata.host_caps2 |= capboot;
+	} else {
+		/* oops...should never fly to here */
+		printk(KERN_ERR "Unknown boot device\n");
 	}
-};
+}
 
-static struct gpio_event_input_info smdk4x12_keypad_key_info = {
-	.info.func              = gpio_event_input_func,
-	.info.no_suspend        = true,
-	.debounce_time.tv64     = 20 * NSEC_PER_MSEC,
-	.type                   = EV_KEY,
-	.keymap                 = smdk4x12_keypad_key_map,
-	.keymap_size            = ARRAY_SIZE(smdk4x12_keypad_key_map)
-};
+static void __init tiny4412_wifi_init(void)
+{
+	/* sdwifi (external): PDn --> RESETn */
+#define SDWIFI_GPIO_PD		EXYNOS4_GPX1(5)
+#define SDWIFI_GPIO_RESET	EXYNOS4_GPX1(4)
+	int ret;
+
+	ret = gpio_request(SDWIFI_GPIO_PD, "SDWIFI_PD");
+	if (ret)
+		printk(KERN_ERR "failed to request GPIO %d for wifi, %d\n",
+				SDWIFI_GPIO_PD, ret);
+
+	gpio_direction_output(SDWIFI_GPIO_PD, 1);
+	udelay(10);
+	gpio_free(SDWIFI_GPIO_PD);
 
-static struct gpio_event_info *smdk4x12_input_info[] = {
-	&smdk4x12_keypad_key_info.info,
+	ret = gpio_request(SDWIFI_GPIO_RESET, "SDWIFI_RESET");
+	if (ret)
+		printk(KERN_ERR "failed to request GPIO %d for wifi, %d\n",
+				SDWIFI_GPIO_RESET, ret);
+
+	gpio_direction_output(SDWIFI_GPIO_RESET, 1);
+	gpio_free(SDWIFI_GPIO_RESET);
+}
+
+#ifdef CONFIG_INPUT_GPIO
+static struct gpio_event_direct_entry tiny4412_key_map[] = {
+	{
+		.gpio	= EXYNOS4_GPX3(2),
+		.code	= KEY_MENU,
+	}, {
+		.gpio	= EXYNOS4_GPX3(3),
+		.code	= KEY_HOME,
+	}, {
+		.gpio	= EXYNOS4_GPX3(4),
+		.code	= KEY_BACK,
+	}, {
+		.gpio	= EXYNOS4_GPX3(5),
+		.code	= 353,	/* DPAD_CENTER */
+	},
 };
 
-static struct gpio_event_platform_data smdk4x12_input_data = {
-	.names  = {
-		"smdk4x12-keypad",
+static struct gpio_event_input_info tiny4412_key_info = {
+	.info.func			= gpio_event_input_func,
+	.info.no_suspend	= true,
+	.debounce_time.tv64	= 20 * NSEC_PER_MSEC,
+	.type				= EV_KEY,
+	.keymap				= tiny4412_key_map,
+	.keymap_size		= ARRAY_SIZE(tiny4412_key_map)
+};
+
+static struct gpio_event_info *tiny4412_input_info[] = {
+	&tiny4412_key_info.info,
+};
+
+static struct gpio_event_platform_data tiny4412_input_data = {
+	.names	= {
+		"tiny4412-key",
 		NULL,
 	},
-	.info           = smdk4x12_input_info,
-	.info_count     = ARRAY_SIZE(smdk4x12_input_info),
+	.info		= tiny4412_input_info,
+	.info_count	= ARRAY_SIZE(tiny4412_input_info),
 };
 
-static struct platform_device smdk4x12_input_device = {
-	.name   = GPIO_EVENT_DEV_NAME,
-	.id     = 0,
-	.dev    = {
-		.platform_data = &smdk4x12_input_data,
+static struct platform_device tiny4412_input_device = {
+	.name	= GPIO_EVENT_DEV_NAME,
+	.id		= 0,
+	.dev	= {
+		.platform_data = &tiny4412_input_data,
 	},
 };
+#endif
+
+static struct platform_device tiny4412_device_1wire = {
+	.name			= "tiny4412_1wire",
+	.id				= -1,
+	.num_resources	= 0,
+};
 
+static struct platform_device tiny4412_device_adc = {
+	.name			= "tiny4412_adc",
+	.id				= -1,
+	.num_resources	= 0,
+};
+
+#ifdef CONFIG_SAMSUNG_DEV_KEYPAD
 static uint32_t smdk4x12_keymap[] __initdata = {
 	/* KEY(row, col, keycode) */
 	KEY(1, 3, KEY_1), KEY(1, 4, KEY_2), KEY(1, 5, KEY_3),
@@ -1486,37 +1689,52 @@
 };
 
 static struct matrix_keymap_data smdk4x12_keymap_data __initdata = {
-        .keymap         = smdk4x12_keymap,
-        .keymap_size    = ARRAY_SIZE(smdk4x12_keymap),
+	.keymap			= smdk4x12_keymap,
+	.keymap_size	= ARRAY_SIZE(smdk4x12_keymap),
 };
 
 static struct samsung_keypad_platdata smdk4x12_keypad_data __initdata = {
-        .keymap_data    = &smdk4x12_keymap_data,
-        .rows           = 3,
-        .cols           = 8,
+	.keymap_data	= &smdk4x12_keymap_data,
+	.rows			= 3,
+	.cols			= 8,
+};
+#endif
+
+/* Audio */
+static struct platform_device tiny4412_audio = {
+	.name		= "tiny4412-audio",
+	.id			= -1,
 };
 
 /* USB OTG */
 static struct s3c_hsotg_plat smdk4x12_hsotg_pdata;
 
 static struct platform_device exynos4_bus_devfreq = {
-	.name			= "exynos4412-busfreq",
+	.name		= "exynos4412-busfreq",
 	.id			= 1,
 };
 
-static struct platform_device samsung_audio = {
-	.name   = "SOC-AUDIO-SAMSUNG",
-	.id     = -1,
-};
-
 /* USB EHCI */
 static struct s5p_ehci_platdata smdk4x12_ehci_pdata;
 
 static void __init smdk4x12_ehci_init(void)
 {
 	struct s5p_ehci_platdata *pdata = &smdk4x12_ehci_pdata;
+	int err;
 
 	s5p_ehci_set_platdata(pdata);
+
+#define GPIO_USBH_RESET		EXYNOS4X12_GPM2(4)
+	err = gpio_request_one(GPIO_USBH_RESET,
+			GPIOF_OUT_INIT_HIGH, "USBH_RESET");
+	if (err)
+		pr_err("failed to request GPM2_4 for USB reset control\n");
+
+	s3c_gpio_setpull(GPIO_USBH_RESET, S3C_GPIO_PULL_UP);
+	gpio_set_value(GPIO_USBH_RESET, 0);
+	mdelay(1);
+	gpio_set_value(GPIO_USBH_RESET, 1);
+	gpio_free(GPIO_USBH_RESET);
 }
 
 /* USB OHCI */
@@ -1541,7 +1759,7 @@
 #ifdef CONFIG_BATTERY_SAMSUNG
 static struct platform_device samsung_device_battery = {
 	.name	= "samsung-fake-battery",
-	.id	= -1,
+	.id = -1,
 };
 #endif
 
@@ -1552,8 +1770,8 @@
 	&s3c_device_hsmmc2,
 	&s3c_device_hsmmc3,
 	&wm8994_fixed_voltage0,
-        &wm8994_fixed_voltage1,
-        &wm8994_fixed_voltage2,
+	&wm8994_fixed_voltage1,
+	&wm8994_fixed_voltage2,
 	&s3c_device_i2c0,
 	&s3c_device_i2c1,
 	&s3c_device_i2c2,
@@ -1562,11 +1780,12 @@
 	&s3c_device_i2c4,
 #endif
 	&s3c_device_i2c7,
+	&s3c_device_adc,
 	&s3c_device_rtc,
-	&s3c_device_usb_hsotg,
 	&s3c_device_wdt,
-	&s5p_device_ehci,
-	&exynos4_device_ohci,
+#ifdef CONFIG_TINY4412_BUZZER
+	&s3c_device_timer[0],
+#endif
 #ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
 	&exynos_device_flite0,
 	&exynos_device_flite1,
@@ -1584,13 +1803,19 @@
 	&s5p_device_mfc_l,
 	&s5p_device_mfc_r,
 	&s5p_device_jpeg,
+#ifdef CONFIG_SAMSUNG_DEV_KEYPAD
 	&samsung_device_keypad,
-	&smdk4x12_input_device,
+#endif
+	&tiny4412_device_1wire,
+	&tiny4412_device_adc,
+#ifdef CONFIG_INPUT_GPIO
+	&tiny4412_input_device,
+#endif
 #ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
 	&exynos4_device_fimc_is,
 #endif
 #ifdef CONFIG_LCD_LMS501KF03
-        &s3c_device_spi_gpio,
+	&s3c_device_spi_gpio,
 #endif
 #ifdef CONFIG_S3C64XX_DEV_SPI0
 	&s3c64xx_device_spi0,
@@ -1602,7 +1827,7 @@
 	&s3c64xx_device_spi2,
 #endif
 #ifdef CONFIG_ION_EXYNOS
-        &exynos_device_ion,
+	&exynos_device_ion,
 #endif
 	&s5p_device_i2c_hdmiphy,
 	&s5p_device_hdmi,
@@ -1617,18 +1842,20 @@
 	&exynos4_device_pcm0,
 #endif
 #ifdef CONFIG_SND_SAMSUNG_SPDIF
-        &exynos4_device_spdif,
+	&exynos4_device_spdif,
 #endif
-	&samsung_audio,
+	&tiny4412_audio,
 #ifdef CONFIG_VIDEO_EXYNOS_FIMG2D
 	&s5p_device_fimg2d,
 #endif
 #ifdef CONFIG_EXYNOS_THERMAL
 	&exynos_device_tmu,
 #endif
+	&s5p_device_ehci,
+	&exynos4_device_ohci,
 	&s5p_device_usbswitch,
 #if defined CONFIG_SND_SAMSUNG_ALP
-        &exynos_device_srp,
+	&exynos_device_srp,
 #endif
 #ifdef CONFIG_BUSFREQ_OPP
 	&exynos4_busfreq,
@@ -1703,6 +1930,21 @@
 }
 #endif
 
+/* usb phy0 mode */
+static int uhost0 = 0;
+
+static int __init tiny4412_setup_uhost(char *str)
+{
+	if (!strcasecmp(str, "y") || !strcmp(str, "1") ||
+		!strcasecmp(str, "yes")) {
+		printk("USB PHY0 configured as HOST mode\n");
+		uhost0 = 1;
+	}
+
+	return 0;
+}
+early_param("uhost0", tiny4412_setup_uhost);
+
 #ifdef CONFIG_USB_EXYNOS_SWITCH
 static struct s5p_usbswitch_platdata smdk4x12_usbswitch_pdata;
 
@@ -1752,12 +1994,12 @@
 
 #ifdef CONFIG_VIDEO_EXYNOS_FIMG2D
 static struct fimg2d_platdata fimg2d_data __initdata = {
-	.ip_ver         = IP_VER_G2D_4P,
-	.hw_ver         = 0x41,
-	.parent_clkname = "mout_g2d0",
-	.clkname        = "sclk_fimg2d",
-	.gate_clkname   = "fimg2d",
-	.clkrate        = 200 * MHZ,
+	.ip_ver			= IP_VER_G2D_4P,
+	.hw_ver			= 0x41,
+	.parent_clkname	= "mout_g2d0",
+	.clkname		= "sclk_fimg2d",
+	.gate_clkname	= "fimg2d",
+	.clkrate		= 200 * MHZ,
 };
 #endif
 
@@ -1834,11 +2076,11 @@
 
 	exynos4_setup_clock(&s3c_device_hsmmc2.dev, "dout_mmc2",
 					"mout_mpll_user", 100 * MHZ);
-#ifdef CONFIG_EXYNOS4_DEV_DWMCI
 #ifdef CONFIG_SND_SAMSUNG_I2S_MASTER
 	exynos4_setup_clock(&exynos_device_dwmci.dev, "dout_mmc4",
 					"mout_epll", 400 * MHZ);
 #else
+#ifdef CONFIG_EXYNOS4_DEV_DWMCI
 	exynos4_setup_clock(&exynos_device_dwmci.dev, "dout_mmc4",
 					"mout_mpll_user", 440 * MHZ);
 #endif
@@ -1848,7 +2090,7 @@
 static void initialize_non_prime_clocks(void)
 {
 	exynos4_setup_clock(&s5p_device_fimd0.dev, "sclk_fimd",
-                                        "mout_mpll_user", 160 * MHZ);
+                                        "mout_mpll_user", 800 * MHZ);
 
 	exynos4_setup_clock(&s5p_device_fimc0.dev, "sclk_fimc",
 					"mout_mpll_user", 160 * MHZ);
@@ -1882,6 +2124,13 @@
 
 static void __init smdk4x12_machine_init(void)
 {
+#ifdef CONFIG_TOUCHSCREEN_FT5X0X
+	struct s3cfb_lcd *lcd = tiny4412_get_lcd();
+	ft5x0x_pdata.screen_max_x = lcd->width;
+	ft5x0x_pdata.screen_max_y = lcd->height;
+#endif
+
+	exynos_bootdev_init();
 
 #ifdef CONFIG_S3C64XX_DEV_SPI0
 	spi_register_board_info(spi0_board_info, ARRAY_SIZE(spi0_board_info));
@@ -1893,50 +2142,57 @@
 	spi_register_board_info(spi2_board_info, ARRAY_SIZE(spi2_board_info));
 #endif
 
-	s3c_i2c0_set_platdata(NULL);
-
-	if (samsung_pack() == EXYNOS4412_PACK_SCP)
-#ifdef CONFIG_REGULATOR_S5M8767
-		i2c_register_board_info(0, smdk4x12_i2c_devs0_s5m8767,
-				ARRAY_SIZE(smdk4x12_i2c_devs0_s5m8767));
-#endif
-	else {
+	if (samsung_pack() != EXYNOS4412_PACK_SCP) {
 #ifdef CONFIG_REGULATOR_MAX77686
 		max77686_populate_pdata();
-		i2c_register_board_info(0, smdk4x12_i2c_devs0_max77686,
-				ARRAY_SIZE(smdk4x12_i2c_devs0_max77686));
 #endif
 	}
 
-	s3c_i2c1_set_platdata(NULL);
+	s3c_adc_set_platdata(NULL);
+	s3c_adc_setname("samsung-adc-v4");
+
+	s3c_i2c0_set_platdata(&tiny4412_i2c0_data);
+	i2c_register_board_info(0, smdk4x12_i2c_devs0,
+			ARRAY_SIZE(smdk4x12_i2c_devs0));
+
+	s3c_i2c1_set_platdata(&tiny4412_i2c1_data);
 	i2c_register_board_info(1, smdk4x12_i2c_devs1,
-				ARRAY_SIZE(smdk4x12_i2c_devs1));
+			ARRAY_SIZE(smdk4x12_i2c_devs1));
 
 	s3c_i2c2_set_platdata(NULL);
-        i2c_register_board_info(2, smdk4x12_i2c_devs2, ARRAY_SIZE(smdk4x12_i2c_devs2));
+	i2c_register_board_info(2, smdk4x12_i2c_devs2,
+			ARRAY_SIZE(smdk4x12_i2c_devs2));
 
-	s3c_i2c3_set_platdata(NULL);
+	s3c_i2c3_set_platdata(&tiny4412_i2c3_data);
 	i2c_register_board_info(3, smdk4x12_i2c_devs3,
-				ARRAY_SIZE(smdk4x12_i2c_devs3));
+			ARRAY_SIZE(smdk4x12_i2c_devs3));
+
 	s3c_i2c4_set_platdata(NULL);
 
 	smdk4x12_rtc_wake_init();
 	smdk4x12_pmu_wdt_init();
 	smdk4x12_touch_init();
-	s3c_i2c7_set_platdata(NULL);
+	tiny4412_wifi_init();
+
+	s3c_i2c7_set_platdata(&tiny4412_i2c7_data);
 	i2c_register_board_info(7, smdk4x12_i2c_devs7,
-				ARRAY_SIZE(smdk4x12_i2c_devs7));
+			ARRAY_SIZE(smdk4x12_i2c_devs7));
 
 	s3c_hsotg_set_platdata(&smdk4x12_hsotg_pdata);
 #ifdef CONFIG_USB_EXYNOS_SWITCH
 	smdk4x12_usbswitch_init();
 #endif
 	samsung_bl_set(&smdk4x12_bl_gpio_info, &smdk4x12_bl_data);
+
+	tiny4412_fb_init_pdata(&smdk4x12_lcd0_pdata);
 	s5p_fimd0_set_platdata(&smdk4x12_lcd0_pdata);
 #ifdef CONFIG_LCD_LMS501KF03
-        spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
+	spi_register_board_info(spi_board_info, ARRAY_SIZE(spi_board_info));
 #endif
+
+#ifdef CONFIG_SAMSUNG_DEV_KEYPAD
 	samsung_keypad_set_platdata(&smdk4x12_keypad_data);
+#endif
 
 #ifdef CONFIG_EXYNOS4_DEV_DWMCI
 	exynos_dwmci_set_platdata(&exynos_dwmci_pdata);
@@ -1946,7 +2202,7 @@
 	s3c_sdhci3_set_platdata(&smdk4x12_hsmmc3_pdata);
 
 #ifdef CONFIG_ION_EXYNOS
-        exynos_ion_set_platdata();
+	exynos_ion_set_platdata();
 #endif
 	s5p_tv_setup();
 	s5p_i2c_hdmiphy_set_platdata(NULL);
@@ -1959,11 +2215,11 @@
 	smdk4x12_camera_init();
 #endif
 #ifdef CONFIG_VIDEO_EXYNOS_FIMC_LITE
-        smdk4x12_set_camera_flite_platdata();
-        s3c_set_platdata(&exynos_flite0_default_data,
-                        sizeof(exynos_flite0_default_data), &exynos_device_flite0);
-        s3c_set_platdata(&exynos_flite1_default_data,
-                        sizeof(exynos_flite1_default_data), &exynos_device_flite1);
+	smdk4x12_set_camera_flite_platdata();
+	s3c_set_platdata(&exynos_flite0_default_data,
+			sizeof(exynos_flite0_default_data), &exynos_device_flite0);
+	s3c_set_platdata(&exynos_flite1_default_data,
+			sizeof(exynos_flite1_default_data), &exynos_device_flite1);
 #endif
 	smdk4x12_ehci_init();
 
@@ -1979,8 +2235,11 @@
 
 	smdk4x12_ohci_init();
 	platform_add_devices(smdk4x12_devices, ARRAY_SIZE(smdk4x12_devices));
+	if (!uhost0)
+		platform_device_register(&s3c_device_usb_hsotg);
+
 #ifdef CONFIG_VIDEO_EXYNOS_FIMC_IS
-        exynos4_fimc_is_set_platdata(NULL);
+	exynos4_fimc_is_set_platdata(NULL);
 #endif
 
 	if (soc_is_exynos4412()) {
@@ -1990,27 +2249,16 @@
 			initialize_non_prime_clocks();
 	}
 #ifdef CONFIG_BUSFREQ_OPP
-        dev_add(&busfreq, &exynos4_busfreq.dev);
-        ppmu_init(&exynos_ppmu[PPMU_DMC0], &exynos4_busfreq.dev);
-        ppmu_init(&exynos_ppmu[PPMU_DMC1], &exynos4_busfreq.dev);
-        ppmu_init(&exynos_ppmu[PPMU_CPU], &exynos4_busfreq.dev);
+	dev_add(&busfreq, &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DMC0], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_DMC1], &exynos4_busfreq.dev);
+	ppmu_init(&exynos_ppmu[PPMU_CPU], &exynos4_busfreq.dev);
 #endif
 	set_tmu_platdata();
 }
 
-MACHINE_START(SMDK4212, "SMDK4212")
-	/* Maintainer: Kukjin Kim <kgene.kim@samsung.com> */
-	.atag_offset	= 0x100,
-	.init_irq	= exynos4_init_irq,
-	.map_io		= smdk4x12_map_io,
-	.handle_irq	= gic_handle_irq,
-	.init_machine	= smdk4x12_machine_init,
-	.timer		= &exynos4_timer,
-	.restart	= exynos4_restart,
-	.reserve	= &smdk4x12_reserve,
-MACHINE_END
-
-MACHINE_START(SMDK4412, "SMDK4412")
+MACHINE_START(TINY4412, "TINY4412")
+	/* Maintainer: FriendlyARM (www.arm9.net) */
 	/* Maintainer: Kukjin Kim <kgene.kim@samsung.com> */
 	/* Maintainer: Changhwan Youn <chaos.youn@samsung.com> */
 	.atag_offset	= 0x100,
@@ -2023,3 +2271,4 @@
 	.restart	= exynos4_restart,
 	.reserve	= &smdk4x12_reserve,
 MACHINE_END
+
